= Data structures & Algorithms

== Data structures

The _what_ of programming.

== Algorithms

The _how_ of programming.

== Sudoku

image:board-easy.svg[Sudoku board]

Solved by placing one of digits from 1-9 in each square such that:

- Each row must contain all the digits from 1-9
- Each column must contain all the digits from 1-9
- Each 3x3 box must contain all the digits from 1-9

== Task 1.

Think about how to represent a Sudoku board.

The data structure should be able to represent both solved and
unsolved Sudoku.

== Task 2.

Think about how to write a function that takes such a data structure,
representing an unsolved Sudoku, returns a data structure representing
the solution.

It's okay to make changes to the data structure you plan to use.

== Solving Sudoku with depth first search

.From +template.py+
[source,python]
----
from sudoku import digits, main

def search(board):
    if board is None or solved(board): return board

    square = empty_square(board)
    for digit in possible_digits(board, square):
        solution = search(assign(board, square, digit))
        if solution: return solution

    return None
----

== Tasks 3-6

Implement these functions from template.py

.Also from +template.py+
[source,python]
----
def solved(board):
    "Returns true if the given board is already solved."
    pass

def empty_square(board):
    "Return an empty square to try to fill."
    pass

def possible_digits(board, square):
    "Return list of digits to try putting in square s."
    pass

def assign(board, square, digit):
    "Return new board with digit d in square s."
    pass
----

== Task 7

Implement this last function from template.py.

May be trivial or not depending on what data structure you used.

.Also from +template.py+
[source,python]
----
def solve(givens):
    "Given a list of givens, return a solution in the form of a list of digits."
    pass
----

.What +givens+ looks like.
[source,python]
----
[None, '5', None, None, None, '1', '4', '7', '9', None, None, '2', '7', None, None, None, None, '8', None, None, None, None, '4', '6', '2', None, None, None, '4', '6', None, None, '9', '5', '3', '7', None, None, None, None, '6', None, None, None, None, '8', '9', '3', '5', None, None, '6', '4', None, None, None, '9', '6', '1', None, None, None, None, '1', None, None, None, None, '2', '3', None, None, '3', '2', '7', '4', None, None, None, '1', None]
----

.What +solve+ should return.
[source,python]
----
['6', '5', '8', '2', '3', '1', '4', '7', '9', '4', '3', '2', '7', '9', '5', '1', '6', '8', '9', '7', '1', '8', '4', '6', '2', '5', '3', '2', '4', '6', '1', '8', '9', '5', '3', '7', '7', '1', '5', '3', '6', '4', '8', '9', '2', '8', '9', '3', '5', '2', '7', '6', '4', '1', '5', '8', '9', '6', '1', '3', '7', '2', '4', '1', '6', '4', '9', '7', '2', '3', '8', '5', '3', '2', '7', '4', '5', '8', '9', '1', '6']
----

== One way to do it.

Based on the code from Peter Norvig's essay, _Solving Every Sudoku Puzzle_
(http://norvig.com/sudoku.html).

== A new data structure

We'll use a slightly more complex data structure that will allow us to
use a more efficient algorithm.

[source,python]
----
squares = range(81)

def board(givens):
    b = [ set(digits) for _ in squares ]
    for s, d in enumerate(givens):
        if d and not set_digit(b, s, d): return None
    return b
----

We'll get to what +set_digit+ does in a moment.

== The data structure produced by +board+

.The representation of our hard puzzle.
[source,python]
----
[{'8'}, {'5'}, {'3', '6', '1', '9'}, {'3', '6'}, {'6', '1', '7', '9'}, {'2'}, {'4'}, {'3', '6'}, {'3', '6', '1', '7'}, {'7'}, {'2'}, {'3', '6', '1'}, {'4', '3', '5', '8', '6'}, {'5', '6', '1'}, {'4', '3', '5'}, {'3', '5', '8', '6', '1'}, {'3', '5', '8', '6'}, {'9'}, {'6', '1', '9'}, {'3', '6', '9'}, {'4'}, {'3', '5', '8', '6'}, {'5', '6', '1', '7', '9'}, {'3', '5', '9'}, {'3', '5', '8', '6', '1', '7'}, {'2'}, {'3', '5', '8', '6', '1', '7'}, {'6', '9'}, {'8', '6', '9'}, {'8', '6', '9'}, {'1'}, {'4'}, {'7'}, {'3', '5', '8', '6'}, {'3', '5', '8', '6'}, {'2'}, {'3'}, {'7'}, {'5'}, {'6', '2'}, {'6', '2'}, {'8'}, {'9'}, {'1'}, {'4'}, {'6', '1', '9', '2'}, {'4'}, {'8', '6', '1', '9', '2'}, {'3', '5', '6', '2'}, {'5', '6', '9', '2'}, {'3', '5', '9'}, {'3', '5', '8', '6', '7'}, {'3', '5', '8', '6'}, {'3', '5', '8', '6', '7'}, {'4'}, {'3', '6'}, {'3', '6', '2'}, {'9'}, {'8'}, {'1'}, {'3', '5', '6', '2'}, {'7'}, {'3', '5', '6'}, {'5', '6', '2'}, {'1'}, {'7'}, {'4', '5', '2'}, {'5', '2'}, {'4', '5'}, {'3', '5', '8', '6', '2'}, {'9'}, {'3', '5', '8', '6'}, {'5', '9', '2'}, {'8', '9'}, {'8', '9', '2'}, {'7'}, {'3'}, {'6'}, {'5', '8', '1', '2'}, {'4'}, {'5', '8', '1'}]
----

== Implementing the helper functions.

[source,python]
----
def solved(board): return all(len(s) == 1 for s in board)

def empty_square(board):
    def size(s): return len(b[s])
    return min((s for s in squares if size(s) > 1), key=size)

def possible_digits(b, s): return b[s]

def assign(b, s, d):
    new_board = [ s.copy() for s in b ]
    return new_board if set_digit(new_board, s, d) else None
----

There's that +set_digit+ again.

== The implementation of +set_digit+

We use a technique called _constraint propagation_ to dramatically
reduce the search space.

[source,python]
----
# Note, this mutates the passed in board because eliminate does.
def set_digit(b, s, d):
    return all(eliminate_digit(b, s, d2) for d2 in b[s] - {d})

# Note, this mutates the passed in board.
def eliminate_digit(b, s, d):
    if d in b[s]:
        b[s].remove(d) # The mutation
        if not propagate_assignment(b, s): return False
        if not propagate_to_unit(b, s, d): return False
    return True
----

== Propagate assignment

[source,python]
----
def propagate_assignment(b, s):
    # If s is down to one choice, eliminate from peers.
    if len(b[s]) == 1:
        d2 = list(b[s])[0]
        for p in peers[s]:
            if not eliminate_digit(b, p, d2): return False
    return True
----

== Propagate to only possible square.

[source,python]
----
def propagate_to_unit(b, s, d):
    # Now see if it's apparent where d must go if not in s.
    for u in units[s]:
        places = [ s2 for s2 in u if d in b[s2] ]
        if len(places) == 0:
            # Ooops, we just eliminated the last possible place.
            return False
        elif len(places) == 1:
            if not set_digit(b, places[0], d): return False
    return True
----

== How do we know +units+ and +peers+?

First we compute all the rows, columns, and boxes.

[source,python]
----
rows  = [ [ r*9 + c for c in range(9) ] for r in range(9) ]
----

.+rows+
[source,python]
----
[[0, 1, 2, 3, 4, 5, 6, 7, 8], [9, 10, 11, 12, 13, 14, 15, 16, 17], [18, 19, 20, 21, 22, 23, 24, 25, 26], [27, 28, 29, 30, 31, 32, 33, 34, 35], [36, 37, 38, 39, 40, 41, 42, 43, 44], [45, 46, 47, 48, 49, 50, 51, 52, 53], [54, 55, 56, 57, 58, 59, 60, 61, 62], [63, 64, 65, 66, 67, 68, 69, 70, 71], [72, 73, 74, 75, 76, 77, 78, 79, 80]]
----

== Columns

[source,python]
----
cols  = [ [ r*9 + c for r in range(9) ] for c in range(9) ]
----

.+cols+
[source,python]
----
[[0, 9, 18, 27, 36, 45, 54, 63, 72], [1, 10, 19, 28, 37, 46, 55, 64, 73], [2, 11, 20, 29, 38, 47, 56, 65, 74], [3, 12, 21, 30, 39, 48, 57, 66, 75], [4, 13, 22, 31, 40, 49, 58, 67, 76], [5, 14, 23, 32, 41, 50, 59, 68, 77], [6, 15, 24, 33, 42, 51, 60, 69, 78], [7, 16, 25, 34, 43, 52, 61, 70, 79], [8, 17, 26, 35, 44, 53, 62, 71, 80]]
----

== And boxes

[source,python]
----
boxes = [ [ r*9 + c for r in range(rs*3, (rs+1)*3) for c in range(cs*3, (cs+1)*3) ]
          for rs, cs in (divmod(b, 3) for b in range(9)) ]
----

.+boxes+
[source,python]
----
[[0, 1, 2, 9, 10, 11, 18, 19, 20], [3, 4, 5, 12, 13, 14, 21, 22, 23], [6, 7, 8, 15, 16, 17, 24, 25, 26], [27, 28, 29, 36, 37, 38, 45, 46, 47], [30, 31, 32, 39, 40, 41, 48, 49, 50], [33, 34, 35, 42, 43, 44, 51, 52, 53], [54, 55, 56, 63, 64, 65, 72, 73, 74], [57, 58, 59, 66, 67, 68, 75, 76, 77], [60, 61, 62, 69, 70, 71, 78, 79, 80]]
----

== Then compute units and peers

[source,python]
----
all_units = rows + cols + boxes
units     = [ [ u for u in all_units if s in u ] for s in squares ]
peers     = [ set().union(*units[s]) - {s} for s in squares ]
----

[source,python]
----
units[0] => [[0, 1, 2, 3, 4, 5, 6, 7, 8], [0, 9, 18, 27, 36, 45, 54, 63, 72], [0, 1, 2, 9, 10, 11, 18, 19, 20]]
peers[0] => {1, 2, 3, 4, 5, 6, 7, 8, 9, 72, 10, 11, 18, 19, 20, 27, 36, 45, 54, 63}
----

== Wrapping it up into a +solve+ function.

Since our internal data structure isn't the same is the one we are
given and need to return, we need to translate on the way in and out.

[source,python]
----
def solve(givens):
    b = search(board(givens))
    if b is not None:
        return [ None if len(b[s]) > 1 else list(b[s])[0] for s in squares ]
    else:
        return None
----

== Appendix

List comprehensions, a super cool feature of Python.

== Simple list comprehension

.Explicitly building a list
[source,python]
----
single = []
for r in range(9):
    single.append(r * 10)
----

.Using a list comprehension
[source,python]
----
single = [ r * 10 for r in range(9) ]
----

.Both build this list
[source,python]
----
[0, 10, 20, 30, 40, 50, 60, 70, 80]
----

== Nested loops

.Explicit
[source,python]
----
double = []
for x in (0, 3, 6):
    for y in (1, 4):
        double.append((x, y))
----

.Comprehension
[source,python]
----
double = [ (x, y) for x in (0, 3, 6) for y in (1, 4) ]
----

.Produces
[source,python]
----
[(0, 1), (0, 4), (3, 1), (3, 4), (6, 1), (6, 4)]
----

== Nested comprehensions

.Explicit
[source,python]
----
outer = []
for i in range(10):
    inner = []
    for x in range(i):
        inner.append(x * 10)
    outer.append(inner)
----

.Comprehension
[source,python]
----
outer = [ [ x * 10 for x in range(i) ] for i in range(10) ]
----

.Produces
[source,python]
----
[[], [0], [0, 10], [0, 10, 20], [0, 10, 20, 30], [0, 10, 20, 30, 40], [0, 10, 20, 30, 40, 50], [0, 10, 20, 30, 40, 50, 60], [0, 10, 20, 30, 40, 50, 60, 70], [0, 10, 20, 30, 40, 50, 60, 70, 80]]
----
